<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="dg-table-column-width-provider">
  <title>Configuring a Table Column Width Provider</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Table Column Width
              Provider</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p id="p_ljb_dgk_54b">In a custom <xref keyref="glossentry_framework"><term>framework</term></xref>, the
        <xmlelement>table</xmlelement> element as well as the table columns can have specified widths. For
        these widths to be considered by <uicontrol>Author</uicontrol> mode, you need to provide the
        means for determining them. As explained in <xref
          href="dg-styling-table-element.dita#dg-styling-table-element"/>, if you use the table
        element attribute <b>width</b>
        <ph keyref="product"/> can determine the table width automatically. In this example the
        table has <xmlelement>col</xmlelement> elements with <xmlatt>width</xmlatt> attributes that are not recognized
        by default. You will need to implement a Java extension class to determine the column
        widths.</p>
    </context>
    <steps>
      <step>
        <cmd>Create the class <term>simple.documentation.framework.TableColumnWidthProvider</term>.
          This class must implement the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorTableColumnWidthProvider.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorTableColumnWidthProvider</term></xref>
          interface.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_mjb_dgk_54b">import ro.sync.ecss.extensions.api.AuthorAccess;
import ro.sync.ecss.extensions.api.AuthorOperationException;
import ro.sync.ecss.extensions.api.AuthorTableColumnWidthProvider;
import ro.sync.ecss.extensions.api.WidthRepresentation;
import ro.sync.ecss.extensions.api.node.AuthorElement;

public class TableColumnWidthProvider 
      implements AuthorTableColumnWidthProvider {</codeblock>
        </info>
      </step>
      <step>
        <cmd>Method <term>init</term> is taking as argument an <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/node/AuthorElement.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.node.AuthorElement</term></xref> that represents
          the XML <xmlelement>table</xmlelement> element. In our case the column widths are
          specified in <xmlelement>col</xmlelement> elements from the <xmlelement>table</xmlelement>
          element. In such cases you must collect the span information by analyzing the
            <xmlelement>table</xmlelement> element.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_njb_dgk_54b">public void init(AuthorElement tableElement) {
  this.tableElement = tableElement;
  AuthorElement[] colChildren = tableElement.getElementsByLocalName("customcol");
  if (colChildren != null &amp;&amp; colChildren.length &gt; 0) {
    for (int i = 0; i &lt; colChildren.length; i++) {
      AuthorElement colChild = colChildren[i];
      if (i == 0) {
        colsStartOffset = colChild.getStartOffset();
      } 
      if (i == colChildren.length - 1) {
        colsEndOffset = colChild.getEndOffset();
      }
      // Determine the 'width' for this col.
      AttrValue colWidthAttribute = colChild.getAttribute("width");
      String colWidth = null;
      if (colWidthAttribute != null) {
        colWidth = colWidthAttribute.getValue();
        // Add WidthRepresentation objects for the columns this 'customcol'
        //  specification spans over.
        colWidthSpecs.add(new WidthRepresentation(colWidth, true));
      }
    }
  }
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The method <term>isTableAcceptingWidth</term> should check if the table cells are a
            <xmlelement>td</xmlelement> element.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_ojb_dgk_54b">public boolean isTableAcceptingWidth(String tableCellsTagName) {
  return "td".equals(tableCellsTagName);
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The method <term>isTableAndColumnsResizable</term> should check if the table cells are
          a <xmlelement>td</xmlelement> element. This method determines if the table and its columns
          can be resized by dragging the edge of a column.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_pjb_dgk_54b">public boolean isTableAndColumnsResizable(String tableCellsTagName) {
  return "td".equals(tableCellsTagName);
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>Methods <term>getTableWidth</term> and <term>getCellWidth</term> are used to determine
          the table and column width. The table layout engine will ask this <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorTableColumnWidthProvider.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorTableColumnWidthProvider</term></xref>
          implementation what is the table width for each table element and the cell width for each
          cell element from the table that was marked as cell in the CSS using the property
            <codeph>display:table-cell</codeph>. The implementation is simple and just parses the
          value of the <b>width</b> attribute. The methods must return <codeph>null</codeph> for the
          tables / cells that do not have a specified width.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_qjb_dgk_54b">public WidthRepresentation getTableWidth(String tableCellsTagName) {
  WidthRepresentation toReturn = null;
  if (tableElement != null &amp;&amp; "td".equals(tableCellsTagName)) {
  AttrValue widthAttr = tableElement.getAttribute("width");
    if (widthAttr != null) {
      String width = widthAttr.getValue();
      if (width != null) {
        toReturn = new WidthRepresentation(width, true);
      }
    }
  }
  return toReturn;
}</codeblock>
          <codeblock outputclass="language-java" id="codeblock_rjb_dgk_54b">public List&lt;WidthRepresentation&gt; 
getCellWidth(AuthorElement cellElement, int colNumberStart,
  int colSpan) {
  List&lt;WidthRepresentation&gt; toReturn = null;
  int size = colWidthSpecs.size();
  if (size &gt;= colNumberStart &amp;&amp; size &gt;= colNumberStart + colSpan) {
    toReturn = new ArrayList&lt;WidthRepresentation&gt;(colSpan);
    for (int i = colNumberStart; i &lt; colNumberStart + colSpan; i ++) {
      // Add the column widths
      toReturn.add(colWidthSpecs.get(i));
    }
  }
  return toReturn;
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>Methods <term>commitTableWidthModification</term> and
            <term>commitColumnWidthModifications</term> are used to commit changes made to the width
          of the table or its columns when using the mouse drag gestures.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_sjb_dgk_54b">public void commitTableWidthModification
(AuthorDocumentController authorDocumentController,
  int newTableWidth, String tableCellsTagName) throws AuthorOperationException {
  if ("td".equals(tableCellsTagName)) {
    if (newTableWidth &gt; 0) {
      if (tableElement != null) {
        String newWidth = String.valueOf(newTableWidth);
        authorDocumentController.setAttribute("width", new AttrValue(newWidth),
                                              tableElement);
      } else {
        throw new AuthorOperationException("Cannot find the table element.");
      }
    }
  }
}</codeblock>
          <codeblock outputclass="language-java" id="codeblock_tjb_dgk_54b">public void commitColumnWidthModifications
  (AuthorDocumentController authorDocumentController,
  WidthRepresentation[] colWidths, String tableCellsTagName)
  throws AuthorOperationException {
  if ("td".equals(tableCellsTagName)) {
    if (colWidths != null &amp;&amp; tableElement != null) {
      if (colsStartOffset &gt;= 0 &amp;&amp; colsEndOffset &gt;= 0 
&amp;&amp; colsStartOffset &lt; colsEndOffset) {
        authorDocumentController.delete(colsStartOffset, colsEndOffset);
      }
      String xmlFragment = createXMLFragment(colWidths);
      int offset = -1;
      AuthorElement[] header = tableElement.getElementsByLocalName("header");
      if (header != null &amp;&amp; header.length &gt; 0) {
        // Insert the cols elements before the 'header' element 
        offset = header[0].getStartOffset();
      }
      if (offset == -1) {
        throw new AuthorOperationException(
          "No valid offset to insert column width");
      }
      authorDocumentController.insertXMLFragment(xmlFragment, offset);
    }
  }
}

private String createXMLFragment(WidthRepresentation[] widthRepresentations) {
  StringBuffer fragment = new StringBuffer();
  String ns = tableElement.getNamespace();
  for (int i = 0; i &lt; widthRepresentations.length; i++) {
    WidthRepresentation width = widthRepresentations[i];
    fragment.append("&lt;customcol");
    String strRepresentation = width.getWidthRepresentation();
    if (strRepresentation != null) {
      fragment.append(" width=\"" + width.getWidthRepresentation() + "\"");
    }
    if (ns != null &amp;&amp; ns.length() &gt; 0) {
      fragment.append(" xmlns=\"" + ns + "\"");
    }
    fragment.append("/&gt;");
  }
  return fragment.toString();
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The following three methods are used to determine what type of column width
          specifications the table column width provider support. In our case all types of
          specifications are allowed:</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_ujb_dgk_54b">public boolean isAcceptingFixedColumnWidths(String tableCellsTagName) {
  return true;
}

public boolean isAcceptingPercentageColumnWidths(String tableCellsTagName) {
  return true;
}

public boolean isAcceptingProportionalColumnWidths(String tableCellsTagName) {
  return true;
}</codeblock>
        </info>
        <info>
          <note conkeyref="reusable_notes_java-files/sdf_project" id="note_vjb_dgk_54b"/>
        </info>
      </step>
    </steps>
    <result>
      <p id="p_wjb_dgk_54b">In the listing below, the XML document contains the table element:</p>
      <codeblock outputclass="language-xml" id="codeblock_xjb_dgk_54b">&lt;table width="300"&gt;
    &lt;customcol width="50.0px"/&gt;
    &lt;customcol width="1*"/&gt;
    &lt;customcol width="2*"/&gt;
    &lt;customcol width="20%"/&gt;
    &lt;header&gt;
        &lt;td&gt;C1&lt;/td&gt;
        &lt;td&gt;C2&lt;/td&gt;
        &lt;td&gt;C3&lt;/td&gt;
        &lt;td&gt;C4&lt;/td&gt;
    &lt;/header&gt;
    &lt;tr&gt;
        &lt;td&gt;cs=1, rs=1&lt;/td&gt;
        &lt;td&gt;cs=1, rs=1&lt;/td&gt;
        &lt;td row_span="2"&gt;cs=1, rs=2&lt;/td&gt;
        &lt;td row_span="3"&gt;cs=1, rs=3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;cs=1, rs=1&lt;/td&gt;
        &lt;td&gt;cs=1, rs=1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td column_span="3"&gt;cs=3, rs=1&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</codeblock>
      <p id="p_yjb_dgk_54b">When no table column width provider is specified, the table has the following layout:</p>
      <p id="p_zjb_dgk_54b">
        <fig id="fig_akb_dgk_54b">
          <title>Table layout when no column width provider is specified</title>
          <image href="../img/dg_table_no_column_width_provider.png"/>
        </fig>
      </p>
      <p id="p_bkb_dgk_54b">When the above implementation is configured, the table has the correct layout:</p>
      <p id="p_ckb_dgk_54b">
        <fig id="fig_dkb_dgk_54b">
          <title>Columns with custom widths</title>
          <image href="../img/dg_table_with_column_widths.png"/>
        </fig>
      </p>
      <note conkeyref="reusable_notes_java-files/sdf_project" id="note_ekb_dgk_54b"/>
    </result>
  </taskbody>
</task>
