<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="dg-extensions-bundle">
  <title>Configuring an Extensions Bundle</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Configuring an extensions
          bundle</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p id="p_ifb_dgk_54b">All <xref keyref="glossentry_plugin"><term>extensions</term></xref> that
        are provided by <ph keyref="product"/> are includes in a single bundle.<note
          id="note_jfb_dgk_54b">The individual extensions can still be set (<ph
            conkeyref="reusables-preferences-pages/open-the-preferences-page"/>, go to
            <uicontrol>Document Type Association</uicontrol>, double-click a document type, and go
          to the extension tab), and if present, they take precedence over the single provider.
          However, this practice is discouraged and the single provider should be used
          instead.</note></p>
      <p id="p_kfb_dgk_54b">The extensions bundle is represented by the <xref
          href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/ExtensionsBundle.html"
          format="html" scope="external"
          ><term>ro.sync.ecss.extensions.api.ExtensionsBundle</term></xref> class. The provided
        implementation of the <codeph>ExtensionsBundle</codeph> is instantiated when the <xref
          keyref="glossentry_document_type_association"><term>Document Type
          Association</term></xref> rules defined for the custom <xref keyref="glossentry_framework"
            ><term>framework</term></xref> matches a document opened in the editor. Therefore,
        references to objects that need to be persistent throughout the application running session
        must not be kept in the bundle because the next detection event can result in creating
        another <term>ExtensionsBundle</term> instance.</p>
      <p id="p_lfb_dgk_54b">To configure an extensions bundle, follow this procedure:</p>
    </context>
    <steps id="procedure-dg-extensions-bundle">
      <step>
        <cmd>Create a new Java project in your IDE. Create a <filepath>lib</filepath> folder in the
          Java project folder and copy in it the <filepath>oxygen.jar</filepath> file from the
              <filepath><term conkeyref="reusables-user-guide/oxy-install-dir"/>/lib</filepath>
          folder.</cmd>
      </step>
      <step>
        <cmd>Create the class (for example,
            <term>simple.documentation.framework.SDFExtensionsBundle</term>) to extend the abstract
          class <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/ExtensionsBundle.html"
            format="html" scope="external"
            ><term>ro.sync.ecss.extensions.api.ExtensionsBundle</term></xref>.</cmd>
        <info>For example:<p id="p_mfb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_nfb_dgk_54b">public class SDFExtensionsBundle extends ExtensionsBundle {</codeblock>
          </p></info>
      </step>
      <step>
        <cmd>A <codeph>Document Type ID</codeph> and a short description should be defined by
          implementing the <term>getDocumentTypeID</term> and <term>getDescription</term> methods.
          The <codeph>Document Type ID</codeph> is used to uniquely identify the current
            <term>framework</term>. Such an ID must be provided especially if options related to the
            <term>framework</term> need to be persistently stored and retrieved between
          sessions.</cmd>
        <info>For
          example:<codeblock outputclass="language-java" id="codeblock_ofb_dgk_54b">public String getDocumentTypeID() {
    return "Simple.Document.Framework.document.type";
}

public String getDescription() {
    return "A custom extensions bundle used for the Simple Document" + 
           "Framework document type";
}</codeblock></info>
      </step>
      <step>
        <cmd><b>[Optional]</b> To be notified about the activation of the custom <term>Author
            Extension</term> in relation with an open document, <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorExtensionStateListener.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorExtensionStateListener</term></xref> should
          be implemented. The <b>activation</b> and <b>deactivation</b> events received by this
          listener should be used to perform custom initializations and to register or remove
          listeners such as <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorListener.html"
            format="html" scope="external"
            ><term>ro.sync.ecss.extensions.api.AuthorListener</term></xref>, <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorMouseListener.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorMouseListener</term></xref>, or <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorCaretListener.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorCaretListener</term></xref>. The custom
            <term>Author Extension</term> state listener should be provided by implementing the
            <term>createAuthorExtensionStateListener</term> method.</cmd>
        <info>For example:<p id="p_pfb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_qfb_dgk_54b">public AuthorExtensionStateListener createAuthorExtensionStateListener() {
    return new SDFAuthorExtensionStateListener();
}</codeblock>
          </p><p id="p_rfb_dgk_54b">The <codeph>AuthorExtensionStateListener</codeph> is
            instantiated and notified about the activation of the <term>framework</term> when the
            rules of the <term>Document Type Association</term> match a document opened in the
              <uicontrol>Author</uicontrol> editing mode. The listener is notified about the
            deactivation when another <term>framework</term> is activated for the same document, the
            user switches to another mode or the editor is closed. A complete description and
            implementation of <term>ro.sync.ecss.extensions.api.AuthorExtensionStateListener</term>
            can be found in <xref href="dg-author-extension-state-listener.dita">Implementing an
              Author Extension State Listener</xref>.</p><p id="p_sfb_dgk_54b">If <xref
              href="preferences-schema-aware.dita#preferences-schema-aware">Schema-Aware mode</xref>
            is active in <ph keyref="product"/>, all actions that can generate invalid content will
            be redirected toward the <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorSchemaAwareEditingHandlerAdapter.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.AuthorSchemaAwareEditingHandler</term></xref>.
            The handler can resolve a specific case, let the default implementation take place, or
            reject the edit entirely by throwing <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/InvalidEditException.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.InvalidEditException</term></xref>. The actions
            that are forwarded to this handler include typing, delete, or paste.</p><p
            id="p_tfb_dgk_54b">For more details about this handler, see <xref
              keyref="customize_schema-aware-editing-handler"/>.</p></info>
      </step>
      <step>
        <cmd><b>[Optional]</b> You can customize the content completion proposals by creating a
          schema manager filter extension. The interface that declares the methods used for content
          completion proposals filtering is <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/contentcompletion/xml/SchemaManagerFilter.html"
            format="html" scope="external"
              ><term>ro.sync.contentcompletion.xml.SchemaManagerFilter</term></xref>. The filter can
          be applied on elements, attributes, or on their values. The
            <term>createSchemaManagerFilter</term> method is responsible for creating the content
          completion filter. A new <codeph>SchemaManagerFilter</codeph> will be created each time a
          document matches the rules defined by the <term>Document Type Association</term> that
          contains the filter declaration.</cmd>
        <info>For
            example:<codeblock outputclass="language-java" id="codeblock_ufb_dgk_54b">public SchemaManagerFilter createSchemaManagerFilter() {
    return new SDFSchemaManagerFilter();
}</codeblock><p id="p_vfb_dgk_54b">A detailed presentation of the schema manager filter
            can be found in the <xref href="dg-author-content-completion-handler.dita">Configuring a
              Content Completion Handler</xref> section.</p></info>
      </step>
      <step>
        <cmd><b>[Optional]</b> The <uicontrol>Author</uicontrol> mode supports link-based navigation
          between documents and document sections. Therefore, if the document contains elements
          defined as links to other elements (for example, links based on the <xmlatt>id</xmlatt>
          attributes), the extension should provide the means to find the referenced content. To do
          this, an implementation of the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/link/ElementLocatorProvider.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.link.ElementLocatorProvider</term></xref> interface
          should be returned by the <term>createElementLocatorProvider</term> method. Each time an
          element pointed by a link needs to be located, the method is invoked.</cmd>
        <info>For example:<p id="p_wfb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_xfb_dgk_54b">public ElementLocatorProvider createElementLocatorProvider() {
    return new DefaultElementLocatorProvider();
}</codeblock>
          </p><p id="p_yfb_dgk_54b">For more information on how to implement an element locator
            provider, see the <xref href="dg-author-link-target-reference-finder.dita">Configuring a
              Link Target Element Finder</xref> section.</p></info>
      </step>
      <step>
        <cmd><b>[Optional]</b> The drag and drop functionality can be extended by implementing the
            <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/exml/editor/xmleditor/pageauthor/AuthorDnDListener.html"
            format="html" scope="external"
              ><term>ro.sync.exml.editor.xmleditor.pageauthor.AuthorDnDListener</term></xref>
          interface. Relevant methods from the listener are invoked when the mouse is dragged, moved
          over, or exits the <uicontrol>Author</uicontrol> editing mode, when the drop action
          changes, and when the drop occurs. Each method receives the
            <codeph>DropTargetEvent</codeph> containing information about the drag and drop
          operation. The drag and drop extensions are available in <uicontrol>Author</uicontrol>
          mode for both <ph keyref="product"/> Eclipse plugin and standalone application. The
            <uicontrol>Text</uicontrol> mode corresponding listener is available only for <ph
            keyref="product"/> Eclipse plugin. The methods corresponding to each implementation are:
            <term>createAuthorAWTDndListener</term>, <term>createTextSWTDndListener</term>, and
            <term>createAuthorSWTDndListener</term>.</cmd>
        <info>
          <p id="p_zfb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_agb_dgk_54b">public AuthorDnDListener createAuthorAWTDndListener() {
    return new SDFAuthorDndListener();
}</codeblock>
          </p>
          <p id="p_bgb_dgk_54b">For more details about the <uicontrol>Author</uicontrol> mode drag
            and drop listeners, see the <xref href="dg-author-dnd-listener.dita">Configuring a
              custom Drag and Drop Listener</xref> section.</p>
        </info>
      </step>
      <step>
        <cmd><b>[Optional]</b> Another extension that can be included in the bundle is the reference
          resolver. For example, the references represented by the <b>ref</b> element and the
          attribute indicating the referenced resource is <b>location</b>. To be able to obtain the
          content of the referenced resources you will have to implement a Java extension class that
          implements <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorReferenceResolver.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorReferenceResolver</term></xref>. The method
          responsible for creating the custom references resolver is
            <term>createAuthorReferenceResolver</term>. The method is called each time a document
          opened in an <uicontrol>Author</uicontrol> editing mode matches the <term>Document Type
            Association</term> where the extensions bundle is defined. The instantiated references
          resolver object is kept and used until another extensions bundle corresponding to another
          document type is activated as result of the detection process.</cmd>
        <info>For example:<p id="p_cgb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_dgb_dgk_54b">public AuthorReferenceResolver createAuthorReferenceResolver() {
    return new ReferencesResolver();
}</codeblock>
          </p><p id="p_egb_dgk_54b">A more detailed description of the references resolver can be
            found in the <xref href="dg-author-references-resolver.dita">Configuring a References
              Resolver</xref> section.</p></info>
      </step>
      <step>
        <cmd><b>[Optional]</b> To be able to dynamically customize the default CSS styles for a
          certain <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/node/AuthorNode.html"
            format="html" scope="external"
            ><term>ro.sync.ecss.extensions.api.node.AuthorNode</term></xref>, an implementation of
            <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/StylesFilter.html"
            format="html" scope="external"
            ><term>ro.sync.ecss.extensions.api.StylesFilter</term></xref> can be provided. The
          extensions bundle method responsible for creating the <codeph>StylesFilter</codeph> is
            <term>createAuthorStylesFilter</term>. The method is called each time a document opened
          in an <uicontrol>Author</uicontrol> editing mode matches the <term>Document Type
            Association</term> where the extensions bundle is defined. The instantiated filter
          object is kept and used until another extensions bundle corresponding to another document
          type is activated as a result of the detection process.</cmd>
        <info>For example:<p id="p_fgb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_ggb_dgk_54b">public StylesFilter createAuthorStylesFilter() {
    return new SDFStylesFilter();
}</codeblock>
          </p><p id="p_hgb_dgk_54b">See the <xref href="dg-author-css-styles-filter.dita"
              >Configuring CSS Styles Filter</xref> section for more details about the styles filter
            extension.</p></info>
      </step>
      <step>
        <cmd><b>[Optional]</b> To edit data in custom tabular format, implementations of the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorTableCellSpanProvider.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorTableCellSpanProvider</term></xref> and the
            <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorTableColumnWidthProvider.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.AuthorTableColumnWidthProvider</term></xref>
          interfaces should be provided. The two methods from the <codeph>ExtensionsBundle</codeph>
          specifying these two extension points are <term>createAuthorTableCellSpanProvider</term>
          and <term>createAuthorTableColumnWidthProvider</term>.</cmd>
        <info>For example:<p id="p_igb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_jgb_dgk_54b">public AuthorTableCellSpanProvider createAuthorTableCellSpanProvider() {
    return new TableCellSpanProvider();
}

public AuthorTableColumnWidthProvider 
    createAuthorTableColumnWidthProvider() {
    return new TableColumnWidthProvider();
}</codeblock>
          </p><p id="p_kgb_dgk_54b">The two table information providers are not reused for different
            tables. The methods are called for each table in the document so new instances should be
            provided every time. Read more about the cell span and column width information
            providers in <xref href="dg-table-cell-spanning-provider.dita">Configuring a Table Cell
              Span Provider</xref> and <xref href="dg-table-column-width-provider.dita">Configuring
              a Table Column Width Provider</xref> sections.</p><p id="p_lgb_dgk_54b">If the
            functionality related to one of the previous extension points does not need to be
            modified, then the developed <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/ExtensionsBundle.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.ExtensionsBundle</term></xref> should not
            override the corresponding method and leave the default base implementation to return
              <b>null</b>.</p></info>
      </step>
      <step>
        <cmd><b>[Optional]</b> An XML vocabulary can contain links to various areas of a document.
          If the document contains elements defined as links, you can choose to present a more
          relevant text description for each link. To do this, an implementation of the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/link/LinkTextResolver.html"
            format="html" scope="external"
              ><term>ro.sync.ecss.extensions.api.link.LinkTextResolver</term></xref> interface
          should be returned by the <term>createLinkTextResolver</term> method. This implementation
          is used each time the <xref href="dg-oxy-link-text.dita#dg-oxy-link-text"
              ><term>oxy_link-text() function</term></xref> is encountered in the CSS styles
          associated with an element.</cmd>
        <info>For example:<p id="p_mgb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_ngb_dgk_54b">public LinkTextResolver createLinkTextResolver() {
  return new DitaLinkTextResolver();
}</codeblock>
          </p><p id="p_ogb_dgk_54b"><ph keyref="product"/> offers built-in implementations for DITA
            and DocBook: <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/dita/link/DitaLinkTextResolver.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.dita.link.DitaLinkTextResolver</term></xref> and
              <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/docbook/link/DocbookLinkTextResolver.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.docbook.link.DocbookLinkTextResolver</term></xref>
            respectively.</p></info>
      </step>
      <step>
        <cmd>Pack the compiled class into a <xref keyref="glossentry_jar"><term>JAR</term></xref>
          file.</cmd>
      </step>
      <step>
        <cmd>Copy the <term>JAR</term> file into your custom <term>framework</term> directory (for
          example, <filepath>frameworks/sdf</filepath>).</cmd>
      </step>
      <step>
        <cmd>Add the <term>JAR</term> file to the class path. To do this, <ph
            conkeyref="reusables-preferences-pages/open-the-preferences-page"/>, go to
            <uicontrol>Document Type Association</uicontrol>, select the document type (for example,
            <term>SDF</term>), click the <uicontrol>Edit</uicontrol> button, select the
            <uicontrol>Classpath</uicontrol> tab, and click the <uicontrol><image
              href="../img/Add16.png" id="image_en2_lt4_5r"/>Add</uicontrol> button. In the
          displayed dialog box, enter the location of the <term>JAR</term> file relative to the <ph
            keyref="product"/>
          <filepath>frameworks</filepath> folder.</cmd>
      </step>
      <step>
        <cmd>Register the Java class by going to the <uicontrol>Extensions</uicontrol> tab. Click
          the <uicontrol>Choose</uicontrol> button and select the name of the class (for example,
            <term>SDFExtensionsBundle</term>).</cmd>
        <info>
          <note conkeyref="reusable_notes_java-files/sdf_project" id="note_pgb_dgk_54b"/>
        </info>
      </step>
    </steps>
  </taskbody>
  <related-links>
      <link
      href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/ExtensionsBundle.html"
      format="html" scope="external">
      <linktext><codeph>ExtensionsBundle</codeph> Javadoc</linktext>
    </link>
    <link
      href="https://github.com/oxygenxml/web-author-sample-plugins/tree/master/oxygen-dita-extensions-bundle-extension"
      format="html" scope="external">
      <linktext>Sample DITA (framework) extension that sets a custom
          <codeph>ExtensionsBundle</codeph> implementation for customizing links</linktext>
    </link>
  </related-links>
</task>
